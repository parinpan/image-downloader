// Code generated by MockGen. DO NOT EDIT.
// Source: imagedownloader.go

// Package imagedownloader is a generated GoMock package.
package imagedownloader

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockdownloaderClient is a mock of downloaderClient interface.
type MockdownloaderClient struct {
	ctrl     *gomock.Controller
	recorder *MockdownloaderClientMockRecorder
}

// MockdownloaderClientMockRecorder is the mock recorder for MockdownloaderClient.
type MockdownloaderClientMockRecorder struct {
	mock *MockdownloaderClient
}

// NewMockdownloaderClient creates a new mock instance.
func NewMockdownloaderClient(ctrl *gomock.Controller) *MockdownloaderClient {
	mock := &MockdownloaderClient{ctrl: ctrl}
	mock.recorder = &MockdownloaderClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockdownloaderClient) EXPECT() *MockdownloaderClientMockRecorder {
	return m.recorder
}

// DownloadImage mocks base method.
func (m *MockdownloaderClient) DownloadImage(ctx context.Context, url string, destinationPath func(string) string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadImage", ctx, url, destinationPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// DownloadImage indicates an expected call of DownloadImage.
func (mr *MockdownloaderClientMockRecorder) DownloadImage(ctx, url, destinationPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadImage", reflect.TypeOf((*MockdownloaderClient)(nil).DownloadImage), ctx, url, destinationPath)
}

// MockfixtureLoader is a mock of fixtureLoader interface.
type MockfixtureLoader struct {
	ctrl     *gomock.Controller
	recorder *MockfixtureLoaderMockRecorder
}

// MockfixtureLoaderMockRecorder is the mock recorder for MockfixtureLoader.
type MockfixtureLoaderMockRecorder struct {
	mock *MockfixtureLoader
}

// NewMockfixtureLoader creates a new mock instance.
func NewMockfixtureLoader(ctrl *gomock.Controller) *MockfixtureLoader {
	mock := &MockfixtureLoader{ctrl: ctrl}
	mock.recorder = &MockfixtureLoaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockfixtureLoader) EXPECT() *MockfixtureLoaderMockRecorder {
	return m.recorder
}

// LoadExecute mocks base method.
func (m *MockfixtureLoader) LoadExecute(ctx context.Context, batchExecutor func([]string) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadExecute", ctx, batchExecutor)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadExecute indicates an expected call of LoadExecute.
func (mr *MockfixtureLoaderMockRecorder) LoadExecute(ctx, batchExecutor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadExecute", reflect.TypeOf((*MockfixtureLoader)(nil).LoadExecute), ctx, batchExecutor)
}
